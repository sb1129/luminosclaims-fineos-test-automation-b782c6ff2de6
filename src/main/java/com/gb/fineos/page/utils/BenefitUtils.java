package com.gb.fineos.page.utils;

import com.gb.fineos.domain.CaseType;
import com.gb.fineos.domain.TestCaseContext;
import com.gb.fineos.domain.TestInstance;
import com.gb.fineos.integration.db.DbCall;
import com.gb.fineos.integration.db.lookup.CoverageAcceptedDA;
import com.gb.fineos.integration.db.lookup.CoverageDeclinedDA;
import com.gb.fineos.integration.db.lookup.PaymentDA;
import com.gb.fineos.integration.db.lookup.ReserveDA;
import com.gb.fineos.integration.db.lookup.SettlementApprovalDA;
import com.gb.fineos.page.claims.reserves.EditAllReservesPage;
import com.gb.fineos.page.claims.reserves.EditAllReservesPage.EditAllReservesPageRequest;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.AddUnscheduledDuesPage;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.AddUnscheduledDuesPage.AddPaymentPageRequest;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.EditUnscheduledDuesPage;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.EditUnscheduledDuesPage.EditUnscheduledDuesPageRequest;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.PaymentAdditionalDetailsPage;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.dueevents.PaymentAdditionalDetailsPage.PaymentAdditionalDetailsPageRequest;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.offsetsanddeductions.ChoosePartyFromDataset;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.offsetsanddeductions.QuickAddOffsetDeductionPage;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.offsetsanddeductions.QuickAddOffsetDeductionPage.QuickAddOffsetDeductionPageRequest;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.offsetsanddeductions.UpdateAutoGeneratedAdjustmentAdHocDuesPage;
import com.gb.fineos.page.payment.benefitspaymentmanager.payments.offsetsanddeductions.UpdateAutoGeneratedAdjustmentAdHocDuesPage.UpdateAutoGeneratedAdjustmentAdHocDuesPageRequest;
import com.gb.fineos.page.sharedpages.casemanager.displaycase.DisplayCasePageBenefitBase;
import com.gb.fineos.page.sharedpages.casemanager.displaycase.DisplayCasePageBenefitBase.DisplayCasePageBenefitBaseRequest;
import com.gb.fineos.page.sharedpages.casemanager.displaycase.DisplayCasePageClaimBase;
import com.gb.fineos.page.sharedpages.casemanager.displaycase.DisplayCasePageClaimBase.DisplayCasePageClaimBaseRequest;
import com.gb.fineos.page.sharedpages.documentmanager.AddExtraDataPage;
import com.gb.fineos.page.sharedpages.documentmanager.AddExtraDataPage.AddExtraDataPageRequest;
import com.gb.fineos.page.sharedpages.workmanager.ActivityPage;
import com.gb.fineos.page.sharedpages.workmanager.ActivityPage.ActivityPageRequest;
import com.gb.fineos.page.sharedpages.workmanager.ChooseNextProcessStepPage;
import com.gb.fineos.page.sharedpages.workmanager.ChooseNextProcessStepPage.ChooseNextProcessStepPageRequest;
import com.gb.fineos.page.sharedpages.workmanager.activities.documents.LinkADocumentPage;
import com.gb.fineos.page.sharedpages.workmanager.activities.documents.LinkADocumentPage.LinkADocumentPageRequest;
import com.gb.fineos.page.widgets.documentmanager.ExtraDataPage;
import com.gb.fineos.page.widgets.documentmanager.ExtraDataPage.ExtraDataPageRequest;
import com.gb.fineos.page.widgets.documentmanager.doctype.DocumentTypeManagerSearchPage;
import com.gb.fineos.page.widgets.documentmanager.fileupload.UploadDocumentPage;
import com.gb.fineos.screencapture.ScreenCapture;
import com.relevantcodes.extentreports.LogStatus;
import org.testng.Assert;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static com.gb.fineos.domain.CaseType.BENEFIT;
import static com.gb.fineos.domain.CaseType.CLAIM;
import static com.gb.fineos.page.utils.ProcessUtils.CASE_STATUS_LODGEMENT;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.text.IsEqualIgnoringCase.equalToIgnoringCase;

public final class BenefitUtils {

    private static final String RESERVE_APPROVAL_REQUIRED_TASK = "Reserve Approval Required";

    private static final String CC_USER_NAME = "UserName";

    private static final String BENEFIT_TASK = "Submit Coverage Decision for Approval";
    private static final String COVERAGE_APPROVAL_REQUIRED_TASK = "Coverage Approval Required";
    private static final String COVERAGE_DECLINED_APPROVAL_REQUIRED_TASK = "Coverage Declined Approval Required";
    private static final String SUBMIT_SETTLEMENT_OFFER_FOR_APPROVAL_TASK = "Submit Settlement Offer for Approval";
    private static final String SETTLEMENT_APPROVAL_REQUIRED_TASK = "Settlement Approval Required";
    public static final String SETTLEMENT_FINALISED = "Settlement Finalised";
    public static final String PROCEED_WITH_PAYMENT = "PROCEED WITH PAYMENT";

    public static final String LINK_DOCUMENT_TO_PAYMENT = "Link Documents To Payment";
    public static final String LINK_INSURER_DOCUMENT_TO_PAYMENT = "Payment Approval Required";

    public static final String APPROVAL_MESSAGE = "A document linking task has been assigned to the case owner";
    private static final String ERROR_WHILE_READING_DATA_FROM_DB = "Getting an Error while reading data from DB";
    private static final String FIVE = "5.000000";
    private static final String LINK_DOCUMENT_PAGE = "Link document Page";

    public static final String BENEFIT_NUMBER_SUFFIX = "-01-01";

    private BenefitUtils() {
        // Do nothing.
    }

    public static void createBenefit(final TestCaseContext tc) {
        if (tc.isTestInstance(TestInstance.ICARE)) {
            createBenefitICare(tc);
        } else if (tc.isTestInstance(TestInstance.UK)) {
            createBenefitUk(tc);
        } else {
            createBenefitCommon(tc);
        }
    }

    private static void createBenefitCommon(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, CaseType.CLAIM);

        //adding Benefit
        final DisplayCasePageClaimBase displayCasePageClaim = tc.getPage(DisplayCasePageClaimBase.class);
        final DisplayCasePageClaimBaseRequest displayCasePageClaimBaseRequest = new DisplayCasePageClaimBaseRequest(tc);
        displayCasePageClaim.clickCoveragesTab(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickCoveragesAddButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickOkButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickBenefitTypesAddButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickOkButtonCloned(displayCasePageClaimBaseRequest);

        Assert.assertTrue(displayCasePageClaim.isCreateBenefitButtonEnabled(displayCasePageClaimBaseRequest));
        displayCasePageClaim.clickCreateBenefitButton(displayCasePageClaimBaseRequest);

        displayCasePageClaim.verifyBenefitNumber(displayCasePageClaimBaseRequest);

        // Adding GeneratedBenefitCaseAlias to testCaseContext
        tc.getData().put(BENEFIT.getGeneratedCaseAlias(), displayCasePageClaim.getCaseNumber().getText());
    }

    private static void createBenefitICare(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, CaseType.CLAIM);

        //adding Benefit
        final com.gb.fineos.page.sharedpages.casemanager.displaycase.icare.DisplayCasePageClaim displayCasePageClaim =
            tc.getPage(com.gb.fineos.page.sharedpages.casemanager.displaycase.icare.DisplayCasePageClaim.class);

        final com.gb.fineos.page.sharedpages.casemanager.displaycase.icare.DisplayCasePageClaim.DisplayCasePageClaimBaseRequest displayCasePageClaimBaseRequest =
            new com.gb.fineos.page.sharedpages.casemanager.displaycase.icare.DisplayCasePageClaim.DisplayCasePageClaimBaseRequest(tc);

        String claimName = displayCasePageClaim.currentClaimName(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickCoveragesTab(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickCoveragesAddButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickOkButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickBenefitTypesAddButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickOkButtonCloned(displayCasePageClaimBaseRequest);

        Assert.assertTrue(displayCasePageClaim.isCreateBenefitButtonEnabled(displayCasePageClaimBaseRequest));
        displayCasePageClaim.clickCreateBenefitButton(displayCasePageClaimBaseRequest);
        if (claimName.contains("HEALTH INJURY CLAIM")) {
            displayCasePageClaim.clickLiabilityBenefitRow(displayCasePageClaimBaseRequest);
            displayCasePageClaim.clickNextButton(displayCasePageClaimBaseRequest);
        }

        displayCasePageClaim.verifyBenefitNumber(displayCasePageClaimBaseRequest);

        // Adding GeneratedBenefitCaseAlias to testCaseContext
        tc.getData().put(BENEFIT.getGeneratedCaseAlias(), displayCasePageClaim.getCaseNumber().getText());
    }

    private static void createBenefitUk(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, CaseType.CLAIM);

        //Adding Benefit
        final com.gb.fineos.page.sharedpages.casemanager.displaycase.uk.DisplayCasePageClaim displayCasePageClaim =
            tc.getPage(com.gb.fineos.page.sharedpages.casemanager.displaycase.uk.DisplayCasePageClaim.class);

        final com.gb.fineos.page.sharedpages.casemanager.displaycase.uk.DisplayCasePageClaim.DisplayCasePageClaimBaseRequest displayCasePageClaimBaseRequest =
            new com.gb.fineos.page.sharedpages.casemanager.displaycase.uk.DisplayCasePageClaim.DisplayCasePageClaimBaseRequest(tc);

        displayCasePageClaim.clickCoveragesTab(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickPolicyUpdateButton(displayCasePageClaimBaseRequest);

        Assert.assertTrue(displayCasePageClaim.isCreateBenefitButtonEnabled(displayCasePageClaimBaseRequest));
        displayCasePageClaim.clickCreateBenefitButton(displayCasePageClaimBaseRequest);
        displayCasePageClaim.clickCaseAliasTab(displayCasePageClaimBaseRequest);

        displayCasePageClaim.verifyBenefitNumber(displayCasePageClaimBaseRequest);

        // Adding GeneratedBenefitCaseAlias to testCaseContext
        tc.getData().put(BENEFIT.getGeneratedCaseAlias(), displayCasePageClaim.getCaseNumber().getText());
    }


    public static void uploadInsurerApprovalDocument(final TestCaseContext tc) {

        // documents tab
        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBase.DisplayCasePageBenefitBaseRequest displayCasePageBenefitBaseRequest = new DisplayCasePageBenefitBase.DisplayCasePageBenefitBaseRequest(tc);
        displayCasePageBenefitBase.clickDocumentsTab(displayCasePageBenefitBaseRequest);
        displayCasePageBenefitBaseRequest.getContext().log("DISPLAY CASE BENEFIT PAGE", "Document Not Found. Row count = " + displayCasePageBenefitBase.getResultRows().size() + ". Adding Document");
        displayCasePageBenefitBase.clickOnDocumentAddButton(displayCasePageBenefitBaseRequest);
        // search type of document and select outbound correspondence document
        final DocumentTypeManagerSearchPage documentTypeManagerSearchPage = tc.getPage(DocumentTypeManagerSearchPage.class);
        final DocumentTypeManagerSearchPage.DocumentTypeManagerSearchPageRequest documentTypeManagerSearchPageRequest = new DocumentTypeManagerSearchPage.DocumentTypeManagerSearchPageRequest(tc);
        documentTypeManagerSearchPage.clickOnSearchTab(documentTypeManagerSearchPageRequest);
        documentTypeManagerSearchPage.selectCategoryAsDefault(documentTypeManagerSearchPageRequest);
        documentTypeManagerSearchPage.enterBusinessTypeName(documentTypeManagerSearchPageRequest);
        documentTypeManagerSearchPage.clickOnSearchButton(documentTypeManagerSearchPageRequest);
        // Link a Delegated Authority Approval if UK, otherwise link Insurer Approval
        if (tc.isTestInstance(TestInstance.UK)) {
            documentTypeManagerSearchPage.clickOnDelegatedAuthorityApproval(documentTypeManagerSearchPageRequest);
        } else {
            documentTypeManagerSearchPage.clickOnInsurerApproval(documentTypeManagerSearchPageRequest);
        }
        documentTypeManagerSearchPage.clickOnOkButton(documentTypeManagerSearchPageRequest);

        final UploadDocumentPage uploadDocumentPage = tc.getPage(UploadDocumentPage.class);
        final UploadDocumentPage.UploadDocumentPageRequest uploadDocumentPageRequest = new UploadDocumentPage.UploadDocumentPageRequest(tc);

        int retry = 0; //retrying the file upload 3 times.
        final int loop = 3; //retrying the file upload 3 times.

        boolean success = false; //capturing result outcome True/ False.
        while (!success && retry < loop) {
            uploadDocumentPage.uploadDocument(uploadDocumentPageRequest);
            ScreenCapture.logScreenshot("Document Upload", LogStatus.INFO);
            uploadDocumentPage.clickOnOkButton(uploadDocumentPageRequest);

            // Delegated Authority Approval document used for UK does not contain Extra Data Page
            if (!tc.isTestInstance(TestInstance.UK)) {
                final ExtraDataPage extraDataPage = tc.getPage(ExtraDataPage.class);
                final ExtraDataPageRequest extraDataPageRequest = new ExtraDataPageRequest(tc);
                extraDataPage.clickOKOrClose(extraDataPageRequest);
            }

            if (uploadDocumentPage.isValidationMessageExists(uploadDocumentPageRequest, uploadDocumentPage.getWarningMessage())) {
                uploadDocumentPage.clickCloseWarningMessage(uploadDocumentPageRequest);
            } else {
                success = true;
            }
            retry++;
        }
        //checking if the file is uploaded
        if (success) {
            displayCasePageBenefitBaseRequest.log("Display Benefit Page", "file uploaded");
        } else {
            uploadDocumentPageRequest.log("Display Benefit Page", "Upload Failed");
        }

    }

    public static void moveBenefitToProceedWithPayment(final TestCaseContext tc) {
        //Searching for Benefit
        SearchUtils.searchCase(tc, BENEFIT);
        //Benefit task Click on progression arrow mark next to the  Status "Finalised Settlement Required".
        final DisplayCasePageBenefitBase displayCasePageBenefit = tc.getPage(DisplayCasePageBenefitBase.class);
        displayCasePageBenefit.clickProgressionArrowIcon(new DisplayCasePageBenefitBaseRequest(tc));

        final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
        final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
        chooseNextProcessStepPage.clickOnProceedWithPaymentCell(chooseNextProcessStepPageRequest);
        chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);

        assertThat(ProcessUtils.getCurrentStatus(tc), equalToIgnoringCase(PROCEED_WITH_PAYMENT));
    }

    public static void addReserves(final TestCaseContext tc) {
        if (tc.isTestInstance(TestInstance.ICARE) && ProcessUtils.getCurrentStatus(tc, CLAIM).equalsIgnoreCase(CASE_STATUS_LODGEMENT)) {
            tc.log("ICARE specific", "preparing claim before adding expenses");
            ProcessUtils.progressFromLodgementToCoverageDecision(tc);
        }

        final DisplayCasePageBenefitBase displayCasePageBenefit = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitBaseRequest = new DisplayCasePageBenefitBaseRequest(tc);

        final EditAllReservesPage editAllReservesPage = tc.getPage(EditAllReservesPage.class);
        final EditAllReservesPageRequest editAllReservesPageRequest = new EditAllReservesPageRequest(tc);

        SearchUtils.searchCase(tc, BENEFIT);

        //Adding reserve expenses
        displayCasePageBenefit.clickOnEditButton(displayCasePageBenefitBaseRequest);
        editAllReservesPage.enterReserveAmount(editAllReservesPageRequest, editAllReservesPageRequest.getReserveType(), editAllReservesPageRequest.getReserveSectionType());
        editAllReservesPage.clickOkButton(editAllReservesPageRequest);

        //Benefit task and Close the task.
        displayCasePageBenefit.clickTasksTab(displayCasePageBenefitBaseRequest);
        displayCasePageBenefit.selectTaskFromTable(displayCasePageBenefitBaseRequest, RESERVE_APPROVAL_REQUIRED_TASK);
        displayCasePageBenefit.verifyReserveApprovalRequiredTask(displayCasePageBenefitBaseRequest);
        ScreenCapture.logScreenshot("Adding Reserves", LogStatus.INFO);
    }

    public static void approveReserves(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, BENEFIT);

        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);

        getReserveDAApprovalLevel(displayCasePageBenefitBase.getCaseNumber().getText())
            .forEach(daApprovalLevelValue -> {
                AuthenticationUtils.loginAsUser(tc, displayCasePageBenefitBase.getDALevel(daApprovalLevelValue));

                if (daApprovalLevelValue.equals(FIVE)) {
                    //Searching for Benefit
                    SearchUtils.searchCase(tc, BENEFIT);
                    //Benefit task and Close the task.
                    //Open the payment benefit - >Go to Task tab
                    displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);

                    if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, RESERVE_APPROVAL_REQUIRED_TASK)) {
                        displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);
                        final ActivityPage activityPage = tc.getPage(ActivityPage.class);
                        final ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                        activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                        activityPage.clickOnLinkButton(activityPageRequest);

                        final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                        final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                        if (!linkADocumentPage.associatedDocumentsAreVisible(linkADocumentPageRequest)) {
                            linkADocumentPage.clickCaseSearchButton(linkADocumentPageRequest);
                        }
                        // Link a Delegated Authority Approval document if instance is UK, otherise link Insurer Approval
                        if (tc.isTestInstance(TestInstance.UK)) {
                            linkADocumentPage.selectDelegatedAuthorityApprovalRow(linkADocumentPageRequest);
                        } else {
                            linkADocumentPage.selectInsurerApprovalRow(linkADocumentPageRequest);
                        }
                        ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                        linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);
                        activityPage.clickOnCloseScreenButton(activityPageRequest);
                    }
                }

                SearchUtils.searchCase(tc, BENEFIT);

                //close the Reserve approved task in Benefit
                displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                displayCasePageBenefitBase.clickOnAllTasksRadioButton(displayCasePageBenefitRequest);
                displayCasePageBenefitBase.clickOnOpenTasksRadioButton(displayCasePageBenefitRequest);
                displayCasePageBenefitBase.selectTaskFromTable(displayCasePageBenefitRequest, RESERVE_APPROVAL_REQUIRED_TASK);
                displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);

                final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
                final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
                chooseNextProcessStepPage.clickOnApproveCell(chooseNextProcessStepPageRequest);
                chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);
                ScreenCapture.logScreenshot("Approving Reserves", LogStatus.INFO);
            });

        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);
    }

    public static void addPayment(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, BENEFIT);

        final DisplayCasePageBenefitBase displayCasePageBenefit = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);
        displayCasePageBenefit.clickPaymentTab(displayCasePageBenefitRequest);
        displayCasePageBenefit.clickAddPaymentButton(displayCasePageBenefitRequest);

        // Select Payment type
        final AddUnscheduledDuesPage paymentPage = tc.getPage(AddUnscheduledDuesPage.class);
        final AddPaymentPageRequest pageRequest = new AddPaymentPageRequest(tc);

        // Choose Payee
        paymentPage.clickToSearchPayee(pageRequest);

        final ChoosePartyFromDataset payeePage = tc.getPage(ChoosePartyFromDataset.class);
        final ChoosePartyFromDataset.AddPaymentPayeePageRequest pagePayeeRequest = new ChoosePartyFromDataset.AddPaymentPayeePageRequest(tc);
        payeePage.clickOkToChoosePayee(pagePayeeRequest);

        paymentPage.selectPaymentType(pageRequest);
        paymentPage.enterBasicAmount(pageRequest);
        paymentPage.enterDistributionBasicAmount(pageRequest);
        paymentPage.enterPayeeReference(pageRequest);

        if (tc.getData().containsKey("Adjustment_Type")) {
            paymentPage.expandAdjustments(pageRequest);
            paymentPage.clickAddAdjustmentButton(pageRequest);

            // Add Adjustment Component
            final QuickAddOffsetDeductionPage quickAddOffsetDeductionPage = tc.getPage(QuickAddOffsetDeductionPage.class);
            final QuickAddOffsetDeductionPageRequest quickAddOffsetDeductionPageRequest = new QuickAddOffsetDeductionPageRequest(tc);
            quickAddOffsetDeductionPage.selectAdjustmentType(quickAddOffsetDeductionPageRequest);
            quickAddOffsetDeductionPage.enterAdjustmentAmount(quickAddOffsetDeductionPageRequest);
            quickAddOffsetDeductionPage.enterAdjustmentReference(quickAddOffsetDeductionPageRequest);
            quickAddOffsetDeductionPage.clickAddButton(quickAddOffsetDeductionPageRequest);
            quickAddOffsetDeductionPage.clickOkButton(quickAddOffsetDeductionPageRequest);
        }

        // Enter Additional Details
        if (pageRequest.hasAdditionalDetails()) {
            paymentPage.clickAdditionalDetailsTab(pageRequest);

            final PaymentAdditionalDetailsPage paymentAdditionalDetailsPage = tc.getPage(PaymentAdditionalDetailsPage.class);
            final PaymentAdditionalDetailsPageRequest paymentAdditionalDetailsPageRequest = new PaymentAdditionalDetailsPageRequest(tc);

            if (paymentAdditionalDetailsPageRequest.isStatisticalPayment()) {
                paymentAdditionalDetailsPage.setStatisticalPaymentCheckBox(paymentAdditionalDetailsPageRequest);
            }

            if (paymentAdditionalDetailsPageRequest.isFinalPayment()) {
                paymentAdditionalDetailsPage.setFinalPaymentCheckBox(paymentAdditionalDetailsPageRequest);
            }

            if (tc.getData().containsKey("Invoice Date")) {
                paymentAdditionalDetailsPage.enterInvoiceDate(paymentAdditionalDetailsPageRequest);
            }

            paymentAdditionalDetailsPage.clickPaymentTab(paymentAdditionalDetailsPageRequest);
        }

        paymentPage.clickToSavePayment(pageRequest);
    }

    public static void editPayment(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, BENEFIT);

        // Open the payments tab
        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitBaseRequest = new DisplayCasePageBenefitBaseRequest(tc);

        displayCasePageBenefitBase.clickPaymentTab(displayCasePageBenefitBaseRequest);
        displayCasePageBenefitBase.selectPaymentsFromTable(displayCasePageBenefitBaseRequest);
        displayCasePageBenefitBase.clickEditPaymentsButton(displayCasePageBenefitBaseRequest);

        // Change the payment amount and the reserve allocation
        final EditUnscheduledDuesPage editUnscheduledDuesPage = tc.getPage(EditUnscheduledDuesPage.class);
        final EditUnscheduledDuesPageRequest editUnscheduledDuesPageRequest = new EditUnscheduledDuesPageRequest(tc);

        // Edit the payment amount
        editUnscheduledDuesPage.enterBasicAmount(editUnscheduledDuesPageRequest);
        editUnscheduledDuesPage.enterDistributionBasicAmount(editUnscheduledDuesPageRequest);
        editUnscheduledDuesPage.clickToExpandAdjustment(editUnscheduledDuesPageRequest);
        editUnscheduledDuesPage.clickToSavePayment(editUnscheduledDuesPageRequest);
    }

    public static void submitPaymentsForApproval(final DisplayCasePageBenefitBase displayCasePageBenefitBase, final TestCaseContext tc) {
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);
        displayCasePageBenefitBase.clickPaymentTab(displayCasePageBenefitRequest);
        displayCasePageBenefitBase.selectPaymentsFromTable(displayCasePageBenefitRequest);
        displayCasePageBenefitBase.clickApproveRecoverButton(displayCasePageBenefitRequest);
        BenefitUtils.handleAutoGeneratedAdjustmentPage(tc);
        displayCasePageBenefitBase.handlePopUpWidgetWrapper(displayCasePageBenefitRequest);

        ScreenCapture.logScreenshot("Payment sent for Approval", LogStatus.INFO);
    }

    public static void linkDocumentToPayment(final DisplayCasePageBenefitBase displayCasePageBenefitBase, final TestCaseContext tc) {
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);

        displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);

        final ActivityPage activityPage = tc.getPage(ActivityPage.class);
        final ActivityPage.ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
        activityPage.clickOnActivityDocumentsTab(activityPageRequest);
        activityPage.clickOnLinkButton(activityPageRequest);

        final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
        final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
        linkADocumentPage.clickOnCheckBox(linkADocumentPageRequest);
        linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);

        activityPage.clickOnCloseScreenButton(activityPageRequest);
    }

    public static void performDAPaymentApproval(final DisplayCasePageBenefitBase displayCasePageBenefitBase, final TestCaseContext tc) {
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);

        getDAApprovalLevel(displayCasePageBenefitBase.getCaseNumber().getText()).forEach(daApprovalLevelValue -> {
            final String userName = displayCasePageBenefitBase.getDALevel(daApprovalLevelValue);

            AuthenticationUtils.loginAsUser(tc, userName);

            //Searching for Benefit
            SearchUtils.searchCase(tc, BENEFIT);

            // Link Insurer approval document at 5th level
            if (daApprovalLevelValue.equals(FIVE)) {
                displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, LINK_INSURER_DOCUMENT_TO_PAYMENT)) {
                    displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);

                    final ActivityPage activityPage = tc.getPage(ActivityPage.class);
                    final ActivityPage.ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                    activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                    activityPage.clickOnLinkButton(activityPageRequest);

                    final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                    final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                    linkADocumentPage.clickOnCheckBox(linkADocumentPageRequest);
                    ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                    linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);
                    activityPage.clickOnCloseScreenButton(activityPageRequest);
                }
            }

            displayCasePageBenefitBase.clickPaymentTab(displayCasePageBenefitRequest);
            displayCasePageBenefitBase.selectPaymentsFromTable(displayCasePageBenefitRequest);
            displayCasePageBenefitBase.clickApproveRecoverButton(displayCasePageBenefitRequest);
            BenefitUtils.handleAutoGeneratedAdjustmentPage(tc);
            displayCasePageBenefitBase.handlePopUpWidgetWrapper(displayCasePageBenefitRequest);

            if (displayCasePageBenefitBase.getApproveRecoverButton().isDisplayed()) {
                displayCasePageBenefitBase.clickApproveRecoverButton(displayCasePageBenefitRequest);
                BenefitUtils.handleAutoGeneratedAdjustmentPage(tc);
                displayCasePageBenefitBase.handlePopUpWidgetWrapper(displayCasePageBenefitRequest);
            }

            ScreenCapture.logScreenshot("Approved Payment as: " + userName, LogStatus.INFO);
        });

        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);
    }

    public static void approvePayments(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, BENEFIT);

        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);

        submitPaymentsForApproval(displayCasePageBenefitBase, tc);

        Assert.assertTrue(displayCasePageBenefitBase.verifyPaymentApprovalMessage(displayCasePageBenefitRequest, APPROVAL_MESSAGE), "Expected message displayed as " + APPROVAL_MESSAGE);
        displayCasePageBenefitBase.clickTasksTab(new DisplayCasePageBenefitBaseRequest(tc));

        if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, LINK_DOCUMENT_TO_PAYMENT)) {
            linkDocumentToPayment(displayCasePageBenefitBase, tc);
        }

        performDAPaymentApproval(displayCasePageBenefitBase, tc);
    }

    public static void recommendCoverageAcceptedAndApprove(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, CaseType.BENEFIT);

        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);

        displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
        //"Submit Coverage Decision for Approval"
        displayCasePageBenefitBase.selectTaskFromTable(displayCasePageBenefitRequest, BENEFIT_TASK);
        displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);

        //coverage decision eform
        final AddExtraDataPage addExtraDataPage = tc.getPage(AddExtraDataPage.class);
        final AddExtraDataPageRequest addExtraDataPageRequest = new AddExtraDataPageRequest(tc);
        addExtraDataPage.enterExclusionsConsideredValue(addExtraDataPageRequest);
        addExtraDataPage.enterEndorsementsConsideredValue(addExtraDataPageRequest);
        addExtraDataPage.enterExcessStatusValue(addExtraDataPageRequest);
        addExtraDataPage.enterCoverageDecisionCommentValue(addExtraDataPageRequest);
        addExtraDataPage.clickOkButton(addExtraDataPageRequest);

        final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
        final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
        chooseNextProcessStepPage.clickOnRecommendCoverageAcceptedCell(chooseNextProcessStepPageRequest);
        chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);

        displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);

        getCoverageAcceptedDAApprovalLevel(displayCasePageBenefitBase.getCaseNumber().getText())
            .forEach(daApprovalLevelValue -> {
                AuthenticationUtils.loginAsUser(tc, displayCasePageBenefitBase.getDALevel(daApprovalLevelValue));

                if (daApprovalLevelValue.equals(FIVE)) {
                    //Searching for Benefit
                    SearchUtils.searchCase(tc, BENEFIT);
                    //Benefit task and Close the task.
                    //Open the payment benefit - >Go to Task tab
                    displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                    if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, COVERAGE_APPROVAL_REQUIRED_TASK)) {
                        displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);

                        ActivityPage activityPage = tc.getPage(ActivityPage.class);
                        final ActivityPage.ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                        activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                        activityPage.clickOnLinkButton(activityPageRequest);

                        final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                        final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                        if (!linkADocumentPage.associatedDocumentsAreVisible(linkADocumentPageRequest)) {
                            linkADocumentPage.clickCaseSearchButton(linkADocumentPageRequest);
                        }
                        // Link a Delegated Authority Approval document if instance is UK, otherise link Insurer Approval
                        if (tc.isTestInstance(TestInstance.UK)) {
                            linkADocumentPage.selectDelegatedAuthorityApprovalRow(linkADocumentPageRequest);
                        } else {
                            linkADocumentPage.selectInsurerApprovalRow(linkADocumentPageRequest);
                        }
                        ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                        linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);

                        activityPage = tc.getPage(ActivityPage.class);
                        activityPage.clickOnCloseScreenButton(activityPageRequest);
                    }
                }

                SearchUtils.searchCase(tc, BENEFIT);

                //close the Reserve approved task in Benefit
                displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                displayCasePageBenefitBase.selectTaskFromTable(displayCasePageBenefitRequest, COVERAGE_APPROVAL_REQUIRED_TASK);
                displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);
                chooseNextProcessStepPage.clickOnApproveCell(chooseNextProcessStepPageRequest);
                chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);
                ScreenCapture.logScreenshot("Approving coverage accepted", LogStatus.INFO);
            });

        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);

    }

    public static void recommendCoverageDeclinedAndApprove(final TestCaseContext tc) {
        SearchUtils.searchCase(tc, CaseType.BENEFIT);

        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);
        displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);

        //"Submit Coverage Decision for Approval"
        displayCasePageBenefitBase.selectTaskFromTable(displayCasePageBenefitRequest, BENEFIT_TASK);
        displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);

        //coverage decision eform
        final AddExtraDataPage addExtraDataPage = tc.getPage(AddExtraDataPage.class);
        final AddExtraDataPageRequest addExtraDataPageRequest = new AddExtraDataPageRequest(tc);
        addExtraDataPage.enterExclusionsConsideredValue(addExtraDataPageRequest);
        addExtraDataPage.enterEndorsementsConsideredValue(addExtraDataPageRequest);
        addExtraDataPage.enterExcessStatusValue(addExtraDataPageRequest);
        addExtraDataPage.enterCoverageDecisionCommentValue(addExtraDataPageRequest);
        addExtraDataPage.clickOkButton(addExtraDataPageRequest);

        final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
        final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
        chooseNextProcessStepPage.clickOnRecommendCoverageDeclinedCell(chooseNextProcessStepPageRequest);
        chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);

        getCoverageDeclinedDAApprovalLevel(displayCasePageBenefitBase.getCaseNumber().getText())
            .forEach(daApprovalLevelValue -> {
                AuthenticationUtils.loginAsUser(tc, displayCasePageBenefitBase.getDALevel(daApprovalLevelValue));

                if (daApprovalLevelValue.equals(FIVE)) {
                    //Searching for Benefit
                    SearchUtils.searchCase(tc, BENEFIT);
                    //Benefit task and Close the task.
                    //Open the payment benefit - >Go to Task tab
                    displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                    if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, COVERAGE_DECLINED_APPROVAL_REQUIRED_TASK)) {
                        displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);

                        final ActivityPage activityPage = tc.getPage(ActivityPage.class);
                        final ActivityPage.ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                        activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                        activityPage.clickOnLinkButton(activityPageRequest);

                        final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                        final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                        if (!linkADocumentPage.associatedDocumentsAreVisible(linkADocumentPageRequest)) {
                            linkADocumentPage.clickCaseSearchButton(linkADocumentPageRequest);
                        }
                        // Link a Delegated Authority Approval document if instance is UK, otherise link Insurer Approval
                        if (tc.isTestInstance(TestInstance.UK)) {
                            linkADocumentPage.selectDelegatedAuthorityApprovalRow(linkADocumentPageRequest);
                        } else {
                            linkADocumentPage.selectInsurerApprovalRow(linkADocumentPageRequest);
                        }
                        ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                        linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);
                        activityPage.clickOnCloseScreenButton(activityPageRequest);

                    }
                }


                SearchUtils.searchCase(tc, BENEFIT);

                //close the submit coverage approved task in Benefit
                displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);
                displayCasePageBenefitBase.selectTaskFromTable(displayCasePageBenefitRequest, COVERAGE_DECLINED_APPROVAL_REQUIRED_TASK);
                displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);
                chooseNextProcessStepPage.clickOnApproveCell(chooseNextProcessStepPageRequest);
                chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);
                ScreenCapture.logScreenshot("Approving coverage denied", LogStatus.INFO);
            });

        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);
    }

    public static void submitSettlementOfferForApproval(final TestCaseContext tc) {
        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);

        final DisplayCasePageBenefitBase displayCasePageBenefitBase = tc.getPage(DisplayCasePageBenefitBase.class);
        final DisplayCasePageBenefitBaseRequest displayCasePageBenefitRequest = new DisplayCasePageBenefitBaseRequest(tc);
        final List<String> daApprovalLevels = getDAApprovalLevel(displayCasePageBenefitBase.getCaseNumber().getText());

        if (!daApprovalLevels.isEmpty() && daApprovalLevels.get(daApprovalLevels.size() - 1).equals(FIVE)) {
            //Searching for Benefit
            SearchUtils.searchCase(tc, BENEFIT);
            //Benefit task and Close the task.
            //Open the payment benefit - >Go to Task tab
            displayCasePageBenefitBase.clickTasksTab(displayCasePageBenefitRequest);

            if (displayCasePageBenefitBase.isTaskFound(displayCasePageBenefitRequest, COVERAGE_APPROVAL_REQUIRED_TASK)) {
                displayCasePageBenefitBase.clickOnOpenTaskButton(displayCasePageBenefitRequest);

                final ActivityPage activityPage = tc.getPage(ActivityPage.class);
                final ActivityPage.ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                activityPage.clickOnLinkButton(activityPageRequest);

                final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                if (!linkADocumentPage.associatedDocumentsAreVisible(linkADocumentPageRequest)) {
                    linkADocumentPage.clickCaseSearchButton(linkADocumentPageRequest);
                }
                // Link a Delegated Authority Approval document if instance is UK, otherise link Insurer Approval
                if (tc.isTestInstance(TestInstance.UK)) {
                    linkADocumentPage.selectDelegatedAuthorityApprovalRow(linkADocumentPageRequest);
                } else {
                    linkADocumentPage.selectInsurerApprovalRow(linkADocumentPageRequest);
                }
                ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);

                activityPage.clickOnCloseScreenButton(activityPageRequest);
                displayCasePageBenefitBase.clickCloseOnTasks(displayCasePageBenefitRequest);

                final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
                final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
                chooseNextProcessStepPage.clickOnApproveCell(chooseNextProcessStepPageRequest);
                chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);
            }
        }

        SearchUtils.searchCase(tc, CaseType.CLAIM);

        // Claim task and Close the task.
        final DisplayCasePageClaimBase displayCasePageClaimBase = tc.getPage(DisplayCasePageClaimBase.class);
        final DisplayCasePageClaimBaseRequest displayCasePageClaimBaseRequest = new DisplayCasePageClaimBaseRequest(tc);
        displayCasePageClaimBase.clickTasksTab(displayCasePageClaimBaseRequest);

        // Submit Settlement Offer for Approval
        displayCasePageClaimBase.selectTaskFromTable(displayCasePageClaimBaseRequest, SUBMIT_SETTLEMENT_OFFER_FOR_APPROVAL_TASK);
        displayCasePageClaimBase.clickCloseOnTasks(displayCasePageClaimBaseRequest);

        // Coverage decision eform
        final AddExtraDataPage addExtraDataPage = tc.getPage(AddExtraDataPage.class);
        final AddExtraDataPageRequest addExtraDataPageRequest = new AddExtraDataPageRequest(tc);
        addExtraDataPage.enterOfferBreakdown(addExtraDataPageRequest);
        addExtraDataPage.enterOfferConditions(addExtraDataPageRequest);
        addExtraDataPage.clickOkButton(addExtraDataPageRequest);

        // Review Settlement Offer
        final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
        final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);
        chooseNextProcessStepPage.clickOnReviewSettlementOfferCell(chooseNextProcessStepPageRequest);
        chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);
    }

    public static void approveSettlementOffer(final TestCaseContext tc) {
        // Claim task and Close the task.
        final DisplayCasePageClaimBase displayCasePageClaimBase = tc.getPage(DisplayCasePageClaimBase.class);
        final DisplayCasePageClaimBaseRequest displayCasePageClaimBaseRequest = new DisplayCasePageClaimBaseRequest(tc);
        final AddExtraDataPage addExtraDataPage = tc.getPage(AddExtraDataPage.class);
        final AddExtraDataPageRequest addExtraDataPageRequest = new AddExtraDataPageRequest(tc);
        final ChooseNextProcessStepPage chooseNextProcessStepPage = tc.getPage(ChooseNextProcessStepPage.class);
        final ChooseNextProcessStepPageRequest chooseNextProcessStepPageRequest = new ChooseNextProcessStepPageRequest(tc);


        //Searching for Claim
        SearchUtils.searchCase(tc, CLAIM);
        //Claim task and Close the task.
        displayCasePageClaimBase.clickTasksTab(displayCasePageClaimBaseRequest);
        //Submit Settlement Offer for Approval
        displayCasePageClaimBase.selectTaskFromTable(displayCasePageClaimBaseRequest, SUBMIT_SETTLEMENT_OFFER_FOR_APPROVAL_TASK);
        displayCasePageClaimBase.clickCloseOnTasks(displayCasePageClaimBaseRequest);
        //coverage decision eform
        addExtraDataPage.enterOfferBreakdown(addExtraDataPageRequest);
        addExtraDataPage.enterOfferConditions(addExtraDataPageRequest);
        addExtraDataPage.clickOkButton(addExtraDataPageRequest);
        //Review Settlement Offer
        chooseNextProcessStepPage.clickOnReviewSettlementOfferCell(chooseNextProcessStepPageRequest);
        chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);

        getSettlementDAApprovalLevel(displayCasePageClaimBase.getCaseNumber().getText())
            .forEach(daApprovalLevelValue -> {
                AuthenticationUtils.loginAsUser(tc, displayCasePageClaimBase.getDALevel(daApprovalLevelValue));

                if (daApprovalLevelValue.equals(FIVE)) {

                    //Searching for Benefit
                    SearchUtils.searchCase(tc, CLAIM);
                    //upload document
                    uploadInsurerApprovalDocument(tc);
                    //Claim task and Close the task.
                    displayCasePageClaimBase.clickTasksTab(displayCasePageClaimBaseRequest);
                    if (displayCasePageClaimBase.isTaskFound(displayCasePageClaimBaseRequest, SETTLEMENT_APPROVAL_REQUIRED_TASK)) {
                        displayCasePageClaimBase.clickOnOpenTaskButton(displayCasePageClaimBaseRequest);

                        final ActivityPage activityPage = tc.getPage(ActivityPage.class);
                        final ActivityPageRequest activityPageRequest = new ActivityPageRequest(tc);
                        activityPage.clickOnActivityDocumentsTab(activityPageRequest);
                        activityPage.clickOnLinkButton(activityPageRequest);

                        final LinkADocumentPage linkADocumentPage = tc.getPage(LinkADocumentPage.class);
                        final LinkADocumentPageRequest linkADocumentPageRequest = new LinkADocumentPageRequest(tc);
                        if (!linkADocumentPage.associatedDocumentsAreVisible(linkADocumentPageRequest)) {
                            linkADocumentPage.clickCaseSearchButton(linkADocumentPageRequest);
                        }
                        // Link a Delegated Authority Approval document if instance is UK, otherise link Insurer Approval
                        if (tc.isTestInstance(TestInstance.UK)) {
                            linkADocumentPage.selectDelegatedAuthorityApprovalRow(linkADocumentPageRequest);
                        } else {
                            linkADocumentPage.selectInsurerApprovalRow(linkADocumentPageRequest);
                        }
                        ScreenCapture.logScreenshot(LINK_DOCUMENT_PAGE, LogStatus.INFO);
                        linkADocumentPage.clickOnOKBox(linkADocumentPageRequest);
                        activityPage.clickOnCloseScreenButton(activityPageRequest);
                    }
                }

                SearchUtils.searchCase(tc, CLAIM);
                //close the settlement approval task t claim
                displayCasePageClaimBase.clickTasksTab(displayCasePageClaimBaseRequest);
                displayCasePageClaimBase.selectTaskFromTable(displayCasePageClaimBaseRequest, SETTLEMENT_APPROVAL_REQUIRED_TASK);
                displayCasePageClaimBase.clickCloseOnTasks(displayCasePageClaimBaseRequest);

                chooseNextProcessStepPage.clickOnApproveCell(chooseNextProcessStepPageRequest);
                chooseNextProcessStepPage.clickOnOK(chooseNextProcessStepPageRequest);

                assertThat(ProcessUtils.getCurrentStatus(tc), equalToIgnoringCase(SETTLEMENT_FINALISED));
                ScreenCapture.logScreenshot("Approve settlement approval required Task", LogStatus.INFO);
            });

        AuthenticationUtils.loginAsUser(tc, CC_USER_NAME);
    }

    private static List<String> getDAApprovalLevel(final String benefitCaseNumber) {
        final PaymentDA paymentDA = new PaymentDA(DbCall.Database.FINEOSAPP);

        final List<String> levels = new ArrayList<>();

        try {
            levels.addAll(paymentDA.getLevels(benefitCaseNumber, "Payment"));
        } catch (IOException e) {
            Assert.fail(ERROR_WHILE_READING_DATA_FROM_DB);
        }

        return levels;
    }

    private static List<String> getCoverageAcceptedDAApprovalLevel(final String benefitCaseNumber) {
        final CoverageAcceptedDA coverageAcceptedDA = new CoverageAcceptedDA(DbCall.Database.FINEOSAPP);

        final List<String> levels = new ArrayList<>();

        try {
            levels.addAll(coverageAcceptedDA.getLevels(benefitCaseNumber, "Coverage Accepted"));
        } catch (IOException e) {
            Assert.fail(ERROR_WHILE_READING_DATA_FROM_DB);
        }
        return levels;
    }

    private static List<String> getCoverageDeclinedDAApprovalLevel(final String benefitCaseNumber) {
        final CoverageDeclinedDA coverageDeclinedDA = new CoverageDeclinedDA(DbCall.Database.FINEOSAPP);

        final List<String> levels = new ArrayList<>();

        try {
            levels.addAll(coverageDeclinedDA.getLevels(benefitCaseNumber, "Coverage Declined"));
        } catch (IOException e) {
            Assert.fail(ERROR_WHILE_READING_DATA_FROM_DB);
        }
        return levels;
    }

    private static List<String> getSettlementDAApprovalLevel(final String benefitCaseNumber) {
        final SettlementApprovalDA settlementApprovalDA = new SettlementApprovalDA(DbCall.Database.FINEOSAPP);

        final List<String> levels = new ArrayList<>();

        try {
            levels.addAll(settlementApprovalDA.getLevels(benefitCaseNumber, "Settlement Approval"));
        } catch (IOException e) {
            Assert.fail(ERROR_WHILE_READING_DATA_FROM_DB);
        }

        return levels;
    }

    private static List<String> getReserveDAApprovalLevel(final String benefitCaseNumber) {
        final ReserveDA reserveDA = new ReserveDA(DbCall.Database.FINEOSAPP);

        final List<String> levels = new ArrayList<>();

        try {
            levels.addAll(reserveDA.getLevels(benefitCaseNumber, "Reserve"));
        } catch (IOException e) {
            Assert.fail(ERROR_WHILE_READING_DATA_FROM_DB);
        }
        return levels;
    }

    public static void handleAutoGeneratedAdjustmentPage(final TestCaseContext tc) {
        final UpdateAutoGeneratedAdjustmentAdHocDuesPage updateAutoGeneratedAdjustmentAdHocDuesPage = tc.getPage(UpdateAutoGeneratedAdjustmentAdHocDuesPage.class);
        final UpdateAutoGeneratedAdjustmentAdHocDuesPageRequest updateAutoGeneratedAdjustmentAdHocDuesPageRequest = new UpdateAutoGeneratedAdjustmentAdHocDuesPageRequest(tc);
        updateAutoGeneratedAdjustmentAdHocDuesPage.handleAutoGeneratedAdjustmentPage(updateAutoGeneratedAdjustmentAdHocDuesPageRequest);
    }
}
